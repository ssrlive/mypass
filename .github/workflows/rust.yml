name: Rust

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  CARGO_TERM_COLOR: always
  DB_PATH: ${{ github.workspace }}/res/test_db_with_password.kdbx
  PASSWORD: demopass

jobs:
  build:

    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-apple-darwin
          - x86_64-pc-windows-msvc
          - i686-pc-windows-msvc

        include:
          - target: x86_64-unknown-linux-gnu
            host_os: ubuntu-latest
          - target: x86_64-apple-darwin
            host_os: macos-latest
          - target: x86_64-pc-windows-msvc
            host_os: windows-latest
          - target: i686-pc-windows-msvc
            host_os: windows-latest

    runs-on: ${{ matrix.host_os }}

    steps:
    - uses: actions/checkout@v3

    - name: Prepare
      shell: bash
      run: |
        rustup target add ${{ matrix.target }}

    - name: Install packages (Linux)
      if: runner.os == 'Linux'
      uses: rerun-io/cache-apt-pkgs-action@59534850182063abf1b2c11bb3686722a12a8397
      with:
        packages: libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libssl-dev libgtk-3-dev
        version: 1.0
        execute_install_scripts: true

    - name: Rustfmt
      uses: actions-rs/cargo@v1
      with:
        command: fmt
        args: --all -- --check

    - name: Clippy
      run: cargo clippy --all-features -- -D warnings
  
    - name: check --all-features
      uses: actions-rs/cargo@v1
      with:
        command: check
        args: --all-features --target ${{ matrix.target }}

    - name: Build
      run: cargo build --verbose --all-features --target ${{ matrix.target }}

    - name: Run tests
      shell: bash
      run: |
        if [[ "${{ matrix.host_os }}" == "ubuntu-latest" ]]; then
          cargo test --verbose --all-features --target ${{ matrix.target }} -- --skip test_find_cjk_fonts
        else
          cargo test --verbose --all-features --target ${{ matrix.target }}
        fi
